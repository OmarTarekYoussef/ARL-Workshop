// Generated by gencpp from file model/model.msg
// DO NOT EDIT!


#ifndef MODEL_MESSAGE_MODEL_H
#define MODEL_MESSAGE_MODEL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace model
{
template <class ContainerAllocator>
struct model_
{
  typedef model_<ContainerAllocator> Type;

  model_()
    : velocity(0.0)
    , delta(0.0)
    , beta(0.0)
    , xc_dot(0.0)
    , ycdot(0.0)
    , theta_dot(0.0)
    , delta_dot(0.0)
    , xc(0.0)
    , yc(0.0)
    , theta(0.0)  {
    }
  model_(const ContainerAllocator& _alloc)
    : velocity(0.0)
    , delta(0.0)
    , beta(0.0)
    , xc_dot(0.0)
    , ycdot(0.0)
    , theta_dot(0.0)
    , delta_dot(0.0)
    , xc(0.0)
    , yc(0.0)
    , theta(0.0)  {
  (void)_alloc;
    }



   typedef double _velocity_type;
  _velocity_type velocity;

   typedef double _delta_type;
  _delta_type delta;

   typedef double _beta_type;
  _beta_type beta;

   typedef double _xc_dot_type;
  _xc_dot_type xc_dot;

   typedef double _ycdot_type;
  _ycdot_type ycdot;

   typedef double _theta_dot_type;
  _theta_dot_type theta_dot;

   typedef double _delta_dot_type;
  _delta_dot_type delta_dot;

   typedef double _xc_type;
  _xc_type xc;

   typedef double _yc_type;
  _yc_type yc;

   typedef double _theta_type;
  _theta_type theta;





  typedef boost::shared_ptr< ::model::model_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::model::model_<ContainerAllocator> const> ConstPtr;

}; // struct model_

typedef ::model::model_<std::allocator<void> > model;

typedef boost::shared_ptr< ::model::model > modelPtr;
typedef boost::shared_ptr< ::model::model const> modelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::model::model_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::model::model_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::model::model_<ContainerAllocator1> & lhs, const ::model::model_<ContainerAllocator2> & rhs)
{
  return lhs.velocity == rhs.velocity &&
    lhs.delta == rhs.delta &&
    lhs.beta == rhs.beta &&
    lhs.xc_dot == rhs.xc_dot &&
    lhs.ycdot == rhs.ycdot &&
    lhs.theta_dot == rhs.theta_dot &&
    lhs.delta_dot == rhs.delta_dot &&
    lhs.xc == rhs.xc &&
    lhs.yc == rhs.yc &&
    lhs.theta == rhs.theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::model::model_<ContainerAllocator1> & lhs, const ::model::model_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace model

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::model::model_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::model::model_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::model::model_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::model::model_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::model::model_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::model::model_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::model::model_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d6e1c30125128374c4d6c2133db77f6f";
  }

  static const char* value(const ::model::model_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd6e1c30125128374ULL;
  static const uint64_t static_value2 = 0xc4d6c2133db77f6fULL;
};

template<class ContainerAllocator>
struct DataType< ::model::model_<ContainerAllocator> >
{
  static const char* value()
  {
    return "model/model";
  }

  static const char* value(const ::model::model_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::model::model_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 velocity\n"
"float64 delta\n"
"float64 beta\n"
"float64 xc_dot\n"
"float64 ycdot\n"
"float64 theta_dot\n"
"float64 delta_dot\n"
"float64 xc\n"
"float64 yc\n"
"float64 theta\n"
;
  }

  static const char* value(const ::model::model_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::model::model_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.velocity);
      stream.next(m.delta);
      stream.next(m.beta);
      stream.next(m.xc_dot);
      stream.next(m.ycdot);
      stream.next(m.theta_dot);
      stream.next(m.delta_dot);
      stream.next(m.xc);
      stream.next(m.yc);
      stream.next(m.theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct model_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::model::model_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::model::model_<ContainerAllocator>& v)
  {
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "delta: ";
    Printer<double>::stream(s, indent + "  ", v.delta);
    s << indent << "beta: ";
    Printer<double>::stream(s, indent + "  ", v.beta);
    s << indent << "xc_dot: ";
    Printer<double>::stream(s, indent + "  ", v.xc_dot);
    s << indent << "ycdot: ";
    Printer<double>::stream(s, indent + "  ", v.ycdot);
    s << indent << "theta_dot: ";
    Printer<double>::stream(s, indent + "  ", v.theta_dot);
    s << indent << "delta_dot: ";
    Printer<double>::stream(s, indent + "  ", v.delta_dot);
    s << indent << "xc: ";
    Printer<double>::stream(s, indent + "  ", v.xc);
    s << indent << "yc: ";
    Printer<double>::stream(s, indent + "  ", v.yc);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MODEL_MESSAGE_MODEL_H
